// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using personelOtomasyon.Data;

#nullable disable

namespace personelOtomasyon.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428193900_AddBasvuruPuan")]
    partial class AddBasvuruPuan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("personelOtomasyon.Models.AkademikIlan", b =>
                {
                    b.Property<int>("IlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IlanId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BasvuruBaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BasvuruBitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kategori")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TemelAlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Yayinda")
                        .HasColumnType("bit");

                    b.HasKey("IlanId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("KullaniciAdminId");

                    b.ToTable("AkademikIlanlar");
                });

            modelBuilder.Entity("personelOtomasyon.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DogumYili")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TcKimlikNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("personelOtomasyon.Models.Basvuru", b =>
                {
                    b.Property<int>("BasvuruId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasvuruId"));

                    b.Property<DateTime>("BasvuruTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DegerlendirmeTamamlandiMi")
                        .HasColumnType("bit");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IlanId")
                        .HasColumnType("int");

                    b.Property<string>("JuriRaporu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JuriSonucu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdayId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ToplamPuan")
                        .HasColumnType("int");

                    b.HasKey("BasvuruId");

                    b.HasIndex("IlanId");

                    b.HasIndex("KullaniciAdayId");

                    b.ToTable("Basvurular");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruBelge", b =>
                {
                    b.Property<int>("BasvuruBelgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasvuruBelgeId"));

                    b.Property<int>("BasvuruId")
                        .HasColumnType("int");

                    b.Property<string>("BelgeTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosyaYolu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BasvuruBelgeId");

                    b.HasIndex("BasvuruId");

                    b.ToTable("BasvuruBelgeleri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruJuri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasvuruId")
                        .HasColumnType("int");

                    b.Property<string>("JuriId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BasvuruId");

                    b.HasIndex("JuriId");

                    b.ToTable("BasvuruJuriAtamalari");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruPuan", b =>
                {
                    b.Property<int>("BasvuruPuanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasvuruPuanId"));

                    b.Property<int>("BasvuruId")
                        .HasColumnType("int");

                    b.Property<string>("BelgeTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaaliyetAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaaliyetKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puan")
                        .HasColumnType("int");

                    b.Property<DateTime>("PuanVerilmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("YoneticiId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BasvuruPuanId");

                    b.HasIndex("BasvuruId");

                    b.HasIndex("YoneticiId");

                    b.ToTable("BasvuruPuanlar");
                });

            modelBuilder.Entity("personelOtomasyon.Models.Bildirim", b =>
                {
                    b.Property<int>("BildirimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BildirimId"));

                    b.Property<string>("KullaniciId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mesaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OkunduMu")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("BildirimId");

                    b.HasIndex("KullaniciId");

                    b.ToTable("Bildirimler");
                });

            modelBuilder.Entity("personelOtomasyon.Models.DegerlendirmeRaporu", b =>
                {
                    b.Property<int>("RaporId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaporId"));

                    b.Property<int>("BasvuruId")
                        .HasColumnType("int");

                    b.Property<string>("KullaniciJuriId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RaporDosyasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sonuc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaporId");

                    b.HasIndex("BasvuruId");

                    b.HasIndex("KullaniciJuriId");

                    b.ToTable("DegerlendirmeRaporlari");
                });

            modelBuilder.Entity("personelOtomasyon.Models.JuriUyesi", b =>
                {
                    b.Property<string>("JuriUyesiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IlanId")
                        .HasColumnType("int");

                    b.Property<string>("KullaniciJuriId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JuriUyesiId");

                    b.HasIndex("IlanId");

                    b.HasIndex("KullaniciJuriId");

                    b.ToTable("JuriUyeleri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.KadroKriterAlt", b =>
                {
                    b.Property<int>("AltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AltId"));

                    b.Property<int>("BelgeSayisi")
                        .HasColumnType("int");

                    b.Property<string>("BelgeTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KriterId")
                        .HasColumnType("int");

                    b.HasKey("AltId");

                    b.HasIndex("KriterId");

                    b.ToTable("KadroKriterAltlar");
                });

            modelBuilder.Entity("personelOtomasyon.Models.KadroKriteri", b =>
                {
                    b.Property<int>("KriterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KriterId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BelgeSayisi")
                        .HasColumnType("int");

                    b.Property<bool>("BelgeYuklenecekMi")
                        .HasColumnType("bit");

                    b.Property<int>("IlanId")
                        .HasColumnType("int");

                    b.Property<string>("KriterAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciYoneticiId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TemelAlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unvan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ZorunluMu")
                        .HasColumnType("bit");

                    b.HasKey("KriterId");

                    b.HasIndex("IlanId");

                    b.HasIndex("KullaniciYoneticiId");

                    b.ToTable("KadroKriterleri");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("personelOtomasyon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("personelOtomasyon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("personelOtomasyon.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("personelOtomasyon.Models.AkademikIlan", b =>
                {
                    b.HasOne("personelOtomasyon.Models.ApplicationUser", null)
                        .WithMany("Ilanlar")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("KullaniciAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("personelOtomasyon.Models.Basvuru", b =>
                {
                    b.HasOne("personelOtomasyon.Models.AkademikIlan", "Ilan")
                        .WithMany("Basvurular")
                        .HasForeignKey("IlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Aday")
                        .WithMany("Basvurular")
                        .HasForeignKey("KullaniciAdayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aday");

                    b.Navigation("Ilan");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruBelge", b =>
                {
                    b.HasOne("personelOtomasyon.Models.Basvuru", "Basvuru")
                        .WithMany("Belgeler")
                        .HasForeignKey("BasvuruId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basvuru");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruJuri", b =>
                {
                    b.HasOne("personelOtomasyon.Models.Basvuru", "Basvuru")
                        .WithMany()
                        .HasForeignKey("BasvuruId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Juri")
                        .WithMany()
                        .HasForeignKey("JuriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Basvuru");

                    b.Navigation("Juri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.BasvuruPuan", b =>
                {
                    b.HasOne("personelOtomasyon.Models.Basvuru", "Basvuru")
                        .WithMany()
                        .HasForeignKey("BasvuruId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Yonetici")
                        .WithMany()
                        .HasForeignKey("YoneticiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basvuru");

                    b.Navigation("Yonetici");
                });

            modelBuilder.Entity("personelOtomasyon.Models.Bildirim", b =>
                {
                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Kullanici")
                        .WithMany()
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("personelOtomasyon.Models.DegerlendirmeRaporu", b =>
                {
                    b.HasOne("personelOtomasyon.Models.Basvuru", "Basvuru")
                        .WithMany("DegerlendirmeRaporlari")
                        .HasForeignKey("BasvuruId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Juri")
                        .WithMany()
                        .HasForeignKey("KullaniciJuriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basvuru");

                    b.Navigation("Juri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.JuriUyesi", b =>
                {
                    b.HasOne("personelOtomasyon.Models.AkademikIlan", "Ilan")
                        .WithMany()
                        .HasForeignKey("IlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Juri")
                        .WithMany()
                        .HasForeignKey("KullaniciJuriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ilan");

                    b.Navigation("Juri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.KadroKriterAlt", b =>
                {
                    b.HasOne("personelOtomasyon.Models.KadroKriteri", "Kriter")
                        .WithMany("AltBelgeTurleri")
                        .HasForeignKey("KriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kriter");
                });

            modelBuilder.Entity("personelOtomasyon.Models.KadroKriteri", b =>
                {
                    b.HasOne("personelOtomasyon.Models.AkademikIlan", "Ilan")
                        .WithMany("KadroKriterleri")
                        .HasForeignKey("IlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("personelOtomasyon.Models.ApplicationUser", "Yonetici")
                        .WithMany()
                        .HasForeignKey("KullaniciYoneticiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ilan");

                    b.Navigation("Yonetici");
                });

            modelBuilder.Entity("personelOtomasyon.Models.AkademikIlan", b =>
                {
                    b.Navigation("Basvurular");

                    b.Navigation("KadroKriterleri");
                });

            modelBuilder.Entity("personelOtomasyon.Models.ApplicationUser", b =>
                {
                    b.Navigation("Basvurular");

                    b.Navigation("Ilanlar");
                });

            modelBuilder.Entity("personelOtomasyon.Models.Basvuru", b =>
                {
                    b.Navigation("Belgeler");

                    b.Navigation("DegerlendirmeRaporlari");
                });

            modelBuilder.Entity("personelOtomasyon.Models.KadroKriteri", b =>
                {
                    b.Navigation("AltBelgeTurleri");
                });
#pragma warning restore 612, 618
        }
    }
}
